import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import "./Practice.css";
import MetodicalGuide from "./1.docx";
import Code from "./2.cpp";

const labs = [
  {
    title: 'Лабораторная работа №1. Регистр, данные и команды пересылки данных',
    description: 'Изучение регистров общего назначения (РОН) и команд пересылки данных.',
    text: `1.	Занести число из столбца «Число 1» таблицы 1 и строки, соответствующей заданному варианту, в любой РОН;\n
    2.	Занести число из столбца «Число 2» таблицы 1 и строки, соответствующей заданному варианту, в незанятый РОН;\n
    3.	Занести число из столбца «Число 3» таблицы 1 и строки, соответствующей заданному варианту, в незанятый РОН;\n
    4.	Занести число из столбца «Число 4» таблицы 1 и строки, соответствующей заданному варианту, в незанятый РОН;\n
    5.	Занести число из столбца «Число 5» таблицы 1 и строки, соответствующей заданному варианту, в незанятый РОН;\n
    6.	Занести число из столбца «Число 6» таблицы 1 и строки, соответствующей заданному варианту, в незанятый РОН;\n
    7.	Обменять числа, хранящиеся в РОН после выполнения пунктов 1 и 2, между собой, 4-мя разными способами, не потеряв информацию в занятых РОН;\n
    8.	Обменять числа, хранящиеся в РОН после выполнения пунктов 3 и 4, между собой, 4-мя разными способами, не потеряв информацию в занятых РОН;\n
    9.	Обменять числа, хранящиеся в РОН после выполнения пунктов 5 и 6, между собой, 4-мя разными способами, не потеряв информацию в занятых РОН;\n
    10.	Переслать числа, оказавшиеся в РОН после выполнения пункта с номером, взятым из столбца «Пункт 1» таблицы 1 и строки, соответствующей заданному варианту, в любые 16-разрядные РОН без потери знака;\n
    11.	Переслать числа, оказавшиеся в РОН после выполнения пункта с номером, взятым из столбца «Пункт 2» таблицы 1 и строки, соответствующей заданному варианту, в любые 32-разрядные РОН расширенные нулем;\n
     Примечание: Регистр ESP и EBP использовать НЕЛЬЗЯ !!!\n

     Содержание отчета\n
    Отчет по лабораторной работе должен содержать номер, название, цель лабораторной работы, задание на лабораторную работу, текст программы на
    языке ассемблера, написанного от руки при подготовке, распечатки формы в активном состоянии с результатами выполнения лабораторной работы в виде дампа памяти и фрагмента программы, содержащей ассемблерную вставку, а также вывод по работе.\n
`
    
  },
  {
    title: 'Лабораторная работа №2. Арифметические команды',
    description: 'Изучение арифметических команд и получение навыка работы с ними.',
    text: `Постановка задачи\n
    Занести числа в память:\n
    a= 5'678'901'234;\n
    b= 6'789'012'345;\n
    c= 7'890'123'456;\n
    d= 8'901'234'567;\n
    e= 9'012'345'678; f=10'123'456'789.\n
    Произвести  операции  над  числами  a,b,c,d,e,f	по вариантам, заданным в
    таблице 3. Результат вывести в память и распечатать в Memo.\n
    
    Содержание отчета\n
    Отчет по лабораторной работе должен содержать номер, название, цель лабораторной работы, задание на лабораторную работу, текст программы на языке ассемблера, написанного от руки при подготовке, распечатки формы в активном состоянии с результатами выполнения лабораторной работы в виде дампа памяти и фрагмента программы, содержащей ассемблерную вставку, а также контрольный пример и выводы по работе.
    `
  },
  {
    title: 'Лабораторная работа №3. Команды передачи управления',
    description: 'Изучение команд передачи управления и получение навыка работы с ними ',
    text: `Постановка задачи
    1.	С помощью процедуры Random сформировать случайное целое число в диапазоне от 0 до 65535;\n
    \n2.	Четное число (четное с точки зрения математики) записать в ЯП (ячейку памяти), начиная с нулевого элемента массива data. Нечетное число (нечетное с точки зрения математики) записать в ЯП, начиная с 128 элемента массива data. Все числа, которые больше или равны 50000 записать в ЯП, начиная с 256 элемента массива data. Все числа, которые меньше 10000 записать в ЯП, начиная с 384 элемента массива data;
    \n3.	Повторять п.1-п.2, пока число распределенных данных по любому из признаков не превысит 127.
    
    \nСодержание отчета
    \nОтчет по лабораторной работе должен содержать номер, название, цель лабораторной работы, задание на лабораторную работу, текст программы на языке ассемблера, написанного от руки при подготовке, распечатки формы в активном состоянии с результатами выполнения лабораторной работы в виде дампа памяти и фрагмента программы, содержащей ассемблерную вставку, а также вывод по работе.

Пояснения к выполнению лабораторной работы:\n
1.	В самом начале программы выполнить процедуру Randomize;\n
2.	Ассемблерную вставку (если это необходимо) разбить на две части, до применения процедуры Random и после ее применения;\n
3.	Перед применением процедуры Random сохранить необходимые РОН в стеке, а после ее применения восстановить их;\n
4.	Использование процедуры Random выглядит следующим образом:\n
A := Random(Range);\n
где А - переменная типа Word.\n
При этом переменная А станет равной: 0 ≤ А < Range.\n

`
  },
  {
    title: 'Лабораторная работа №4. Логические команды и команды манипулирования битами',
    description: 'Изучение команд передачи управления и получение навыка работы с ними.',
    text: `П1.	Занести в память 32 разрядное шестнадцатеричное число в соответствии с вариантом из таблицы 6;\n
    2.	Подсчитать количество нулей и единиц в данном числе двумя разными способами;\n
    3.	Подсчитать количество парных нулей и парных единиц в данном числе;\n
    4.	В младшем байте числа обменять между собой биты 0-7, 1-6, 2-5, 3-4.\n
    
    Результаты каждого пункта сохранить в памяти и распечатать.\n

    \nОтчет по лабораторной работе должен содержать номер, название, цель лабораторной работы, задание на лабораторную работу, текст программы на языке ассемблера, написанного от руки при подготовке, распечатки формы в активном состоянии с результатами выполнения лабораторной работы в виде дампа памяти и фрагмента программы, содержащей ассемблерную вставку, а также контрольный пример и выводы по работе.

Варианты заданий\n
Таблица 6\n
Номер\n
варианта	Число (HEX)	\n
1	DEFBCDEF	21	23456ABC	41	4467ADEC\n
2	264535АВ	22	34578ABC	42	BCDE5587\n
3	DFAC3421	23	DABC47AE	43	75421DDE\n
4	1254FEDB	24	BDCE4578	44	23794685\n
5	12546FD1	25	58697EFF	45	CEF59764\n
6	FDCB5478	26	22546781	46	162894BB\n
7	ABCDEF45	27	FADCDAD5	47	FEADCBDE\n
8	AAABCD45	28	FEAD45AD	48	CCBDEA43\n
9	BC41424D	29	12451346	49	1457BCEC\n
10	1245BC41	30	ADAECB44	50	CBDEA785\n
11	DA2AD355	31	578FAEDB	51	CBDAE145\n
12	47AC2EFA	32	ABCD1542	52	CBAFE432\n
13	BCD45AE1	33	1679EADB	53	CBFAE342\n
14	14523678	34	1346FAED	54	1678ADEC\n
15	ABCDEF11	35	ABABDFAB	55	47215F57\n
16	BCDEF44A	36	4678FEAB	56	ADCBE875\n
17	1245DBCC	37	CB45AE2A	57	BCDE22EA\n
18	ABE4578A	38	25467BCA	58	4875ADCB\n
19	8754AD4F	39	12478BCE	59	BCDEFA2B\n
20	12345678	40	BCDAE14A	60	17563BCB\n
    `,
    table: `
    <table>
      <thead>
        <tr>
          <th>Номер варианта</th>
          <th>Число (HEX)</th>
          <th>Номер варианта</th>
          <th>Число (HEX)</th>
          <th>Номер варианта</th>
          <th>Число (HEX)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>1</td><td>DEFBCDEF</td><td>21</td><td>23456ABC</td><td>41</td><td>4467ADEC</td>
        </tr>
        <tr>
          <td>2</td><td>264535AB</td><td>22</td><td>34578ABC</td><td>42</td><td>BCDE5587</td>
        </tr>
        <tr>
          <td>3</td><td>DFAC3421</td><td>23</td><td>DABC47AE</td><td>43</td><td>75421DDE</td>
        </tr>
        <tr>
          <td>4</td><td>1254FEDB</td><td>24</td><td>BDCE4578</td><td>44</td><td>23794685</td>
        </tr>
        <tr>
          <td>5</td><td>12546FD1</td><td>25</td><td>58697EFF</td><td>45</td><td>CEF59764</td>
        </tr>
        <tr>
          <td>6</td><td>FDCB5478</td><td>26</td><td>22546781</td><td>46</td><td>162894BB</td>
        </tr>
        <tr>
          <td>7</td><td>ABCDEF45</td><td>27</td><td>FADCDAD5</td><td>47</td><td>FEADCBDE</td>
        </tr>
        <tr>
          <td>8</td><td>AAABCD45</td><td>28</td><td>FEAD45AD</td><td>48</td><td>CCBDEA43</td>
        </tr>
        <tr>
          <td>9</td><td>BC41424D</td><td>29</td><td>12451346</td><td>49</td><td>1457BCEC</td>
        </tr>
        <tr>
          <td>10</td><td>1245BC41</td><td>30</td><td>ADAECB44</td><td>50</td><td>CBDEA785</td>
        </tr>
        <tr>
          <td>11</td><td>DA2AD355</td><td>31</td><td>578FAEDB</td><td>51</td><td>CBDAE145</td>
        </tr>
        <tr>
          <td>12</td><td>47AC2EFA</td><td>32</td><td>ABCD1542</td><td>52</td><td>CBAFE432</td>
        </tr>
        <tr>
          <td>13</td><td>BCD45AE1</td><td>33</td><td>1679EADB</td><td>53</td><td>CBFAE342</td>
        </tr>
        <tr>
          <td>14</td><td>14523678</td><td>34</td><td>1346FAED</td><td>54</td><td>1678ADEC</td>
        </tr>
        <tr>
          <td>15</td><td>ABCDEF11</td><td>35</td><td>ABABDFAB</td><td>55</td><td>47215F57</td>
        </tr>
        <tr>
          <td>16</td><td>BCDEF44A</td><td>36</td><td>4678FEAB</td><td>56</td><td>ADCBE875</td>
        </tr>
        <tr>
          <td>17</td><td>1245DBCC</td><td>37</td><td>CB45AE2A</td><td>57</td><td>BCDE22EA</td>
        </tr>
        <tr>
          <td>18</td><td>ABE4578A</td><td>38</td><td>25467BCA</td><td>58</td><td>4875ADCB</td>
        </tr>
        <tr>
          <td>19</td><td>8754AD4F</td><td>39</td><td>12478BCE</td><td>59</td><td>BCDEFA2B</td>
        </tr>
        <tr>
          <td>20</td><td>12345678</td><td>40</td><td>BCDAE14A</td><td>60</td><td>17563BCB</td>
        </tr>
      </tbody>
    </table>`
  }
];

export default class Practice extends PureComponent {
  state = {
    currentLabIndex: 0,
    selectedVariant: 1
  }

  handleLabChange = (e) => {
    this.setState({
      currentLabIndex: Number(e.target.value),
      selectedVariant: 1
    });
  }

  handleVariantChange = (e) => {
    this.setState({
      selectedVariant: Number(e.target.value)
    });
  }

  openMailClient = () => {
    const email = 'pasha123jarcov@gmail.com';
    const subject = encodeURIComponent('Лабораторная работа');
    const body = encodeURIComponent(`Здравствуйте,\n\nОтправляю вам выполненную лабораторную работу.\n\nС уважением,\n[Ваше имя]`);
    window.location.href = `mailto:${email}?subject=${subject}&body=${body}`;
  }

  render() {
    const { currentLabIndex, selectedVariant } = this.state;
    const currentLab = labs[currentLabIndex];
    const variantOptions = Array.from({ length: currentLab.totalVariants }, (_, i) => i + 1);

    return (
      <div className='div-labs'>
        <div className='lab-header'>
          <div className='lab-title-select'>
            <select value={currentLabIndex} onChange={this.handleLabChange}>
              {labs.map((lab, index) => (
                <option key={index} value={index}>{lab.title}</option>
              ))}
            </select>
          </div>
          <div className='lab-title'>
            {currentLab.title}
          </div>
        </div>
        <div className='lab-description'>
          <strong>Цель работы:</strong> {currentLab.description}
        </div>
        <div className='task-list'>
          {currentLab.text.split('\n').map((line, index) => (
            <React.Fragment key={index}>
              {line}<br />
            </React.Fragment>
          ))}
        </div>
        <div className='lab-actions'>
          <a
            href={MetodicalGuide}
            download="Методические указания_Ассемблер_С++.docx"
            target="_blank"
            rel="noreferrer"
          >
            <button>Скачать методические указания</button>
          </a>
          <button onClick={this.openMailClient}>Отправить выполненную работу</button>
          <a
            href={Code}
            download="Шаблон_для_кода.cpp"
            target="_blank"
            rel="noreferrer"
          >
            <button>Скачать код для работы</button>
          </a>
        </div> 
      </div>
    )
  }
}
